{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && error) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \" \", label, \"  \"), React.createElement(\"input\", Object.assign({}, input, {\n        type: input.type,\n        className: \"\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n  }\n\n  onSubmit(formvalues) {\n    this.props.createStream(formvalues);\n    console.log(\"input\", formvalues);\n  }\n\n  render() {\n    //    fields: {title, description}\n    const {\n      handleSubmit\n    } = this.props;\n    return React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: handleSubmit(this.onSubmit.bind(this)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      type: \"text\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      type: \"text\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nconst formWrappeed = reduxForm({\n  form: 'streamCreate',\n  // fields: ['title', 'description'] ,\n  validate: validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(formWrappeed); // export default  connect (reduxForm({   form:'streamCreate'  ,\n// // fields: ['title', 'description'] ,\n// validate : validate\n// })(StreamCreate));\n//  {formProps.meta.touched && formProps.meta.error}      \n//  {/* <span>{formProps.meta.error}</span> */}\n// <input   {...formProps.input}   />   // jsx syntax 0f below syntax\n// <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamCreate","Component","renderError","error","touched","renderInput","input","label","meta","className","type","onSubmit","formvalues","props","console","log","render","handleSubmit","bind","validate","formValues","errors","title","description","formWrappeed","reduxForm","form"],"mappings":"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","sourcesContent":[" \r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createStream} from '../../actions';\r\n\r\nclass  StreamCreate extends React.Component{\r\n  \r\n\r\n    \r\n    renderError = ({error , touched}) => {\r\n        if(touched && error){\r\n            return(\r\n                <div className = \"ui error message\">\r\n                        <div className=\"header\">{error}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n  \r\n  \r\n    renderInput = (  {input , label , meta }    ) => {\r\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\r\n         return (\r\n              <div className= {className}>\r\n                 <label> {label}  </label>\r\n                <input {...input} type={input.type} className=\"\" autoComplete = \"off\" />\r\n                  {this.renderError(meta)}\r\n            </div>\r\n\r\n          )\r\n    }\r\n\r\n\r\n    onSubmit(formvalues){\r\n        this.props.createStream(formvalues)\r\n        console.log(\"input\", formvalues )\r\n\r\n}\r\n\r\n    render(){\r\n    //    fields: {title, description}\r\n        const { handleSubmit   } = this.props;\r\n        return ( <form  className=\"ui form error\"  onSubmit = { handleSubmit(this.onSubmit.bind(this))} >\r\n            <Field name=\"title\"   type=\"text\"        component={this.renderInput}  label = 'Enter Title' />\r\n            <Field name=\"description\"   type=\"text\"   component={this.renderInput}  label = \"Enter Description\"   /> \r\n            <button  className=\"ui button primary\">Submit</button>\r\n        </form>)\r\n    }\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n const errors = {};\r\n\r\n if (!formValues.title ) {\r\n    errors.title = 'You must enter a title';\r\n }\r\n     \r\n if (!formValues.description ) {\r\n    errors.description = 'You must enter a description';\r\n }\r\n\r\n    return errors;\r\n}\r\n\r\n\r\nconst formWrappeed =  reduxForm({   form:'streamCreate'  ,\r\n// fields: ['title', 'description'] ,\r\nvalidate : validate\r\n})(StreamCreate);\r\n\r\n\r\nexport default connect(null,{createStream})(formWrappeed);\r\n\r\n// export default  connect (reduxForm({   form:'streamCreate'  ,\r\n// // fields: ['title', 'description'] ,\r\n// validate : validate\r\n// })(StreamCreate));\r\n\r\n\r\n//  {formProps.meta.touched && formProps.meta.error}      \r\n          //  {/* <span>{formProps.meta.error}</span> */}\r\n          // <input   {...formProps.input}   />   // jsx syntax 0f below syntax\r\n          // <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />\r\n"]},"metadata":{},"sourceType":"module"}