{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(this.props);\n  }\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.vedioRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","console","log","buildPlayer","player","stream","id","match","params","createPlayer","type","url","attachMediaElement","current","load","render","title","description","vedioRef","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA2B,eAA3B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAGDC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AAGH;;AAEDM,EAAAA,WAAW,GAAE;AACT,QAAI,KAAKC,MAAL,IAAe,CAAC,KAAKP,KAAL,CAAWQ,MAA/B,EAAuC;AAC/B;AACP;;AACD,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAA9B;AAEA,SAAKX,KAAL,CAAWJ,WAAX,CAAuBa,EAAvB;AACA,SAAKF,MAAL,GAAcb,GAAG,CAACkB,YAAJ,CAAiB;AAC3BC,MAAAA,IAAI,EAAG,KADoB;AAE3BC,MAAAA,GAAG,EAAI,8BAA6BL,EAAG;AAFZ,KAAjB,CAAd;AAIA,SAAKF,MAAL,CAAYQ,kBAAZ,CAA+B,KAAKd,QAAL,CAAce,OAA7C;AACA,SAAKT,MAAL,CAAYU,IAAZ;AAEH;;AAGDC,EAAAA,MAAM,GAAI;AACN,QAAG,CAAC,KAAKlB,KAAL,CAAWQ,MAAf,EAAuB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACF;;AAED,UAAM;AAACW,MAAAA,KAAD;AAASC,MAAAA;AAAT,QAAwB,KAAKpB,KAAL,CAAWQ,MAAzC;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,GAAG,EAAE,KAAKa,QAAjB;AAA2B,MAAA,KAAK,EAAG;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAnC;AAAmD,MAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKH,KAAL,CAFJ,EAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHI,CADJ;AAOH;;AA5CmC;;AAgDxC,MAAMG,eAAe,GAAG,CAACC,KAAD,EAASC,QAAT,KAAuB;AAC3C,SAAO;AAACjB,IAAAA,MAAM,EAAIgB,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACf,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAX,GAAP;AAEC,CAHL;;AAOA,eAAed,OAAO,CAAE4B,eAAF,EAAkB;AAAC3B,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\r\nimport flv from 'flv.js';\r\nimport {connect} from 'react-redux';\r\nimport {fetchStream } from '../../actions';\r\n\r\nclass StreamShow extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    };\r\n\r\n\r\n    componentDidMount(){\r\n        console.log(this.props)\r\n        \r\n\r\n    }\r\n\r\n    buildPlayer(){\r\n        if (this.player || !this.props.stream ){\r\n                return;\r\n        }\r\n        const {id} = this.props.match.params;\r\n\r\n        this.props.fetchStream(id);\r\n        this.player = flv.createPlayer({\r\n            type : 'flv',\r\n            url : `http://localhost:8000/live/${id}.flv`\r\n        });\r\n        this.player.attachMediaElement(this.videoRef.current); \r\n        this.player.load();\r\n\r\n    }\r\n\r\n\r\n    render () {\r\n        if(!this.props.stream) {\r\n           return <div>Loading ...</div>\r\n        }\r\n\r\n        const {title , description} = this.props.stream;\r\n        return (\r\n            <div>\r\n                <video ref={this.vedioRef} style ={{width:'100%'}} controls={true}/>\r\n                <h1>{title}</h1>\r\n        <h5>{description}</h5>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nconst mapStateToProps = (state , ownProps ) => {\r\n    return {stream :  state.streams[ownProps.match.params.id]}\r\n    \r\n    };\r\n    \r\n    \r\n \r\nexport default connect (mapStateToProps,{fetchStream})(StreamShow);\r\n"]},"metadata":{},"sourceType":"module"}