{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamEdit.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStream, editStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      console.log(\"StreamEdit\", formValues);\n      this.props.editStream(this.props.match.params.id);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    console.log(this.props);\n\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Edit a Stream\"), React.createElement(StreamForm, {\n      initialValues: _.pick(this.props.stream, 'title', 'description') //this.props.stream \n      //  { title :'EDIT ME' , description : 'Change me too'} \n      ,\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit); //With react-route each component needs to designed to work in isolation ( fetch its own data)","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamEdit.js"],"names":["_","React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","onSubmit","formValues","console","log","props","match","params","id","componentDidMount","render","stream","pick","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,EAAsBC,UAAtB,QAAuC,eAAvC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SASrCC,QATqC,GASzBC,UAAD,IAAgB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA2BF,UAA3B;AACA,WAAKG,KAAL,CAAWR,UAAX,CAAuB,KAAKQ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AACD,KAZoC;AAAA;;AAGrCC,EAAAA,iBAAiB,GAAE;AAEjB,SAAKJ,KAAL,CAAWT,WAAX,CAAuB,KAAKS,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA/C;AAED;;AAODE,EAAAA,MAAM,GAAG;AACPP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;;AACA,QAAG,CAAC,KAAKA,KAAL,CAAWM,MAAf,EAAsB;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AACH,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADO,EAEP,oBAAC,UAAD;AAAa,MAAA,aAAa,EAAIlB,CAAC,CAACmB,IAAF,CAAO,KAAKP,KAAL,CAAWM,MAAlB,EAA0B,OAA1B,EAAmC,aAAnC,CAAJ,CACxB;AACJ;AAFE;AAIK,MAAA,QAAQ,EAAG,KAAKV,QAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFO,CAAT;AASD;;AA5BsC;;AAkCzC,MAAMY,eAAe,GAAG,CAACC,KAAD,EAASC,QAAT,KAAuB;AAC/C,SAAO;AAACJ,IAAAA,MAAM,EAAIG,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACT,KAAT,CAAeC,MAAf,CAAsBC,EAApC;AAAX,GAAP;AAEC,CAHD;;AAOA,eAAeb,OAAO,CAAEkB,eAAF,EAAkB;AAAEjB,EAAAA,WAAF;AAAgBC,EAAAA;AAAhB,CAAlB,CAAP,CAAsDE,UAAtD,CAAf,C,CAGA","sourcesContent":["import _ from 'lodash';\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchStream , editStream} from '../../actions';\r\nimport StreamForm from './StreamForm';\r\n\r\nclass StreamEdit extends React.Component {\r\n  \r\n\r\n    componentDidMount(){\r\n\r\n      this.props.fetchStream(this.props.match.params.id);\r\n\r\n    }\r\n\r\n    onSubmit = (formValues) => {\r\n      console.log(\"StreamEdit\" , formValues)\r\n      this.props.editStream( this.props.match.params.id , )\r\n    }\r\n\r\n    render (){\r\n      console.log(this.props)\r\n      if(!this.props.stream){\r\n          return <div>Loading...</div>\r\n      }\r\n    return ( <div>\r\n      <h3>Edit a Stream</h3>\r\n      <StreamForm  initialValues ={ _.pick(this.props.stream, 'title' ,'description') \r\n        //this.props.stream \r\n    //  { title :'EDIT ME' , description : 'Change me too'} \r\n    }\r\n           onSubmit ={this.onSubmit}/>\r\n      \r\n       </div>)\r\n  }\r\n}\r\n\r\n\r\n\r\n \r\nconst mapStateToProps = (state , ownProps ) => {\r\nreturn {stream :  state.streams[ownProps.match.params.id]}\r\n\r\n};\r\n\r\n\r\n\r\nexport default connect (mapStateToProps,{ fetchStream , editStream})(StreamEdit);\r\n\r\n\r\n//With react-route each component needs to designed to work in isolation ( fetch its own data)"]},"metadata":{},"sourceType":"module"}