{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React, { PropTypes } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (touched && errror) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, error));\n      }\n    };\n  }\n\n  //  renderInput(  formProps    ){\n  renderInput({\n    input,\n    label,\n    meta\n  }) {\n    return React.createElement(\"div\", {\n      className: \"field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \" \", label, \"  \"), React.createElement(\"input\", Object.assign({}, input, {\n      type: input.type,\n      className: \"\",\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    })), this.renderError(meta), meta.touched && meta.error, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, meta.error)) //  {formProps.meta.touched && formProps.meta.error}      \n    // {/* <span>{formProps.meta.error}</span> */}\n    // <input   {...formProps.input}   />   // jsx syntax 0f below syntax\n    // <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />\n    ;\n  }\n\n  onSubmit(formvalues) {\n    console.log(\"input\", formvalues); //    event.preventDefault();\n  }\n\n  render() {\n    //    fields: {title, description}\n    const {\n      handleSubmit\n    } = this.props;\n    console.log(this.props);\n    return React.createElement(\"form\", {\n      className: \"ui form\",\n      onSubmit: handleSubmit(this.onSubmit.bind(this)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      type: \"text\",\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      type: \"text\",\n      component: this.renderInput,\n      label: \"Enter Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamCreate',\n  // fields: ['title', 'description'] ,\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","PropTypes","Field","reduxForm","StreamCreate","Component","renderError","error","touched","errror","renderInput","input","label","meta","type","onSubmit","formvalues","console","log","render","handleSubmit","props","bind","validate","formValues","errors","title","description","form"],"mappings":"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","sourcesContent":[" \r\nimport React, { PropTypes} from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\n\r\n\r\nclass  StreamCreate extends React.Component{\r\n  \r\n\r\n    \r\n    renderError = ({error , touched}) => {\r\n        if(touched && errror){\r\n            return(\r\n                <div className = \"ui error message\">\r\n<div className=\"header\">{error}</div>\r\n\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n  \r\n  \r\n  \r\n    //  renderInput(  formProps    ){\r\n    renderInput(  {input , label , meta }    ){\r\n         return (\r\n              <div className=\"field\">\r\n                 <label> {label}  </label>\r\n                < input {...input} type={input.type} className=\"\" autoComplete = \"off\" />\r\n                {this.renderError(meta)}\r\n                 {meta.touched && meta.error}      \r\n                 <span>{meta.error}</span> \r\n            </div>\r\n\r\n          //  {formProps.meta.touched && formProps.meta.error}      \r\n          // {/* <span>{formProps.meta.error}</span> */}\r\n          // <input   {...formProps.input}   />   // jsx syntax 0f below syntax\r\n          // <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />\r\n        )\r\n    }\r\n    onSubmit(  formvalues      ){\r\n\r\n\r\n\r\n\r\n    console.log(\"input\", formvalues )\r\n//    event.preventDefault();\r\n}\r\n\r\n    render(){\r\n    //    fields: {title, description}\r\n        const {handleSubmit   } = this.props;\r\n\r\n        console.log(this.props);\r\n        return ( <form  className=\"ui form\"  onSubmit = { handleSubmit(this.onSubmit.bind(this))} >\r\n            <Field name=\"title\"   type=\"text\"        component={this.renderInput}  label = 'Enter Title' />\r\n            <Field name=\"description\"   type=\"text\"   component={this.renderInput}  label = \"Enter Description\"   /> \r\n            <button  className=\"ui button primary\">Submit</button>\r\n\r\n        \r\n        </form>)\r\n    }\r\n    \r\n\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n}\r\n\r\nconst validate = (formValues) =>{\r\n const errors = {};\r\n\r\n if (!formValues.title ) {\r\n    errors.title = 'You must enter a title';\r\n }\r\n     \r\n if (!formValues.description ) {\r\n    errors.description = 'You must enter a description';\r\n }\r\n\r\n    return errors;\r\n}\r\n\r\nexport default  reduxForm({         form:'streamCreate'  ,\r\n// fields: ['title', 'description'] ,\r\nvalidate : validate\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}