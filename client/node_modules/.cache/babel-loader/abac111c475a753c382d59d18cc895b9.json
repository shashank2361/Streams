{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\nimport StreamForm from './StreamForm';\n\nclass StreamCreate extends React.Component {\n  onCreateSubmit(formvalues) {\n    this.props.createStream(formvalues);\n    console.log(\"input\", formvalues);\n  }\n\n  render() {\n    // const { handleSubmit   } = this.props;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"Create a Stream\"), React.createElement(StreamForm, {\n      onSubmit: this.onCreateSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n  }\n\n} // const validate = (formValues) =>{\n// const errors = {};\n//      if (!formValues.title ) {\n//         errors.title = 'You must enter a title';\n//     }\n//     if (!formValues.description ) {\n//         errors.description = 'You must enter a description';\n//  }\n//     return errors;\n// }\n// const formWrappeed =  reduxForm({   form:'streamCreate'  ,\n// // fields: ['title', 'description'] ,\n// validate : validate\n// })(StreamCreate);\n\n\nexport default connect(null, {\n  createStream\n})(StreamCreate); // export default  connect (reduxForm({   form:'streamCreate'  ,\n// // fields: ['title', 'description'] ,\n// validate : validate\n// })(StreamCreate));\n//  {formProps.meta.touched && formProps.meta.error}      \n//  {/* <span>{formProps.meta.error}</span> */}\n// <input   {...formProps.input}   />   // jsx syntax 0f below syntax\n// <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />\n//   <form  \n//             className=\"ui form error\" \n//             onSubmit = { handleSubmit(this.onSubmit.bind(this))} >\n//             <Field name=\"title\"   type=\"text\"        component={this.renderInput}  label = 'Enter Title' />\n//             <Field name=\"description\"   type=\"text\"   component={this.renderInput}  label = \"Enter Description\"   /> \n//             <button  className=\"ui button primary\">Submit</button>\n// </form>","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamCreate.js"],"names":["React","connect","createStream","StreamForm","StreamCreate","Component","onCreateSubmit","formvalues","props","console","log","render"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AACA,MAAOC,YAAP,SAA4BJ,KAAK,CAACK,SAAlC,CAA2C;AAE3CC,EAAAA,cAAc,CAACC,UAAD,EAAY;AAClB,SAAKC,KAAL,CAAWN,YAAX,CAAwBK,UAAxB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,UAArB;AACP;;AAGGI,EAAAA,MAAM,GAAE;AACL;AACC,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAI,KAAKL,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAOH;;AAjBsC,C,CAoB3C;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAGA,eAAeL,OAAO,CAAC,IAAD,EAAM;AAACC,EAAAA;AAAD,CAAN,CAAP,CAA6BE,YAA7B,CAAf,C,CAEA;AACA;AACA;AACA;AAGA;AACU;AACA;AACA;AAMF;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":[" \r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {createStream} from '../../actions';\r\nimport StreamForm from './StreamForm';\r\nclass  StreamCreate extends React.Component{\r\n  \r\nonCreateSubmit(formvalues){\r\n        this.props.createStream(formvalues)\r\n        console.log(\"input\", formvalues )\r\n}\r\n\r\n\r\n    render(){\r\n       // const { handleSubmit   } = this.props;\r\n        return (\r\n            <div>\r\n                <h3>Create a Stream</h3>\r\n                <StreamForm onSubmit = {this.onCreateSubmit}/>\r\n            </div>\r\n\r\n         )\r\n    }\r\n}\r\n\r\n// const validate = (formValues) =>{\r\n// const errors = {};\r\n//      if (!formValues.title ) {\r\n//         errors.title = 'You must enter a title';\r\n//     }\r\n     \r\n//     if (!formValues.description ) {\r\n//         errors.description = 'You must enter a description';\r\n//  }\r\n//     return errors;\r\n// }\r\n\r\n\r\n// const formWrappeed =  reduxForm({   form:'streamCreate'  ,\r\n// // fields: ['title', 'description'] ,\r\n// validate : validate\r\n// })(StreamCreate);\r\n\r\n\r\nexport default connect(null,{createStream})(StreamCreate);\r\n\r\n// export default  connect (reduxForm({   form:'streamCreate'  ,\r\n// // fields: ['title', 'description'] ,\r\n// validate : validate\r\n// })(StreamCreate));\r\n\r\n\r\n//  {formProps.meta.touched && formProps.meta.error}      \r\n          //  {/* <span>{formProps.meta.error}</span> */}\r\n          // <input   {...formProps.input}   />   // jsx syntax 0f below syntax\r\n          // <input   onChange ={formProps.input.onChange}  value= {formProps.input.value}  />\r\n\r\n\r\n\r\n\r\n\r\n        //   <form  \r\n        //             className=\"ui form error\" \r\n        //             onSubmit = { handleSubmit(this.onSubmit.bind(this))} >\r\n        //             <Field name=\"title\"   type=\"text\"        component={this.renderInput}  label = 'Enter Title' />\r\n        //             <Field name=\"description\"   type=\"text\"   component={this.renderInput}  label = \"Enter Description\"   /> \r\n        //             <button  className=\"ui button primary\">Submit</button>\r\n        // </form>"]},"metadata":{},"sourceType":"module"}