{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    console.log(\"didmount\");\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  }\n\n  componentDidUpdate() {\n    console.log(\"didupdate\");\n    this.buildPlayer();\n  }\n\n  componentWillUnmount() {\n    console.log(\"didunmount\", this.player);\n\n    if (this.player != undefined) {\n      this.player.pause();\n      this.player.unload();\n      this.player.detachMediaElement();\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  buildPlayer() {\n    console.log(this.player, this.props.stream, this.videoRef);\n\n    if (this.player || !this.props.stream) {\n      console.log(\"return\");\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params;\n    this.player = flv.createPlayer({\n      type: 'flv',\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    console.log(this.player);\n\n    if (this.videoRef.current != null) {\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Loading ...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["E:/React/streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","console","log","id","match","params","buildPlayer","componentDidUpdate","componentWillUnmount","player","undefined","pause","unload","detachMediaElement","destroy","stream","createPlayer","type","url","current","attachMediaElement","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport flv from 'flv.js';\r\nimport {connect} from 'react-redux';\r\nimport {fetchStream } from '../../actions';\r\n\r\nclass StreamShow extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.videoRef = React.createRef();\r\n    };\r\n\r\n\r\n    componentDidMount(){\r\n        console.log(\"didmount\");\r\n        const {id} = this.props.match.params;\r\n        this.props.fetchStream(id);\r\n        this.buildPlayer();\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"didupdate\");\r\n\r\n           this.buildPlayer();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n\r\n        console.log(\"didunmount\" , this.player);\r\n\r\n        if  (    this.player != undefined){\r\n            this.player.pause();\r\n            this.player.unload();\r\n            this.player.detachMediaElement();\r\n            this.player.destroy();\r\n            this.player = null;\r\n                  \r\n        }\r\n           \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    buildPlayer(){\r\n\r\n        console.log( this.player , this.props.stream , this.videoRef );\r\n\r\n        if ( this.player  || !this.props.stream ){\r\n            console.log(\"return\")\r\n                return;\r\n        }\r\n\r\n\r\n        const {id} = this.props.match.params;\r\n\r\n        this.player = flv.createPlayer({\r\n            type : 'flv',\r\n            url : `http://localhost:8000/live/${id}.flv`\r\n        });\r\n\r\n        console.log(this.player)\r\n        if  (this.videoRef.current != null){\r\n            this.player.attachMediaElement(this.videoRef.current); \r\n            this.player.load();\r\n    \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    render () {\r\n\r\n\r\n        if( !this.props.stream) {\r\n           return <div>Loading ...</div>\r\n        }\r\n\r\n        const {title , description} = this.props.stream;\r\n        return (\r\n            <div>\r\n                <video ref={this.videoRef} style ={{width:'100%'}} controls={true}/>\r\n                <h1>{title}</h1>\r\n        <h5>{description}</h5>\r\n            </div>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nconst mapStateToProps = (state , ownProps ) => {\r\n    return {stream :  state.streams[ownProps.match.params.id]}\r\n    \r\n    };\r\n    \r\n    \r\n \r\nexport default connect (mapStateToProps,{fetchStream})(StreamShow);\r\n"]},"metadata":{},"sourceType":"module"}